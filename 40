#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// English letter frequencies (in percentage)
const float english_frequencies[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
    0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056,
    2.758, 0.978, 2.360, 0.150, 1.974, 0.074
};

// Function to count frequencies of letters in a string
void count_letter_frequencies(const char *text, int *frequencies) {
    int i;
    for (i = 0; text[i] != '\0'; ++i) {
        char ch = toupper(text[i]);
        if (isalpha(ch)) {
            frequencies[ch - 'A']++;
        }
    }
}

// Function to compare letter frequencies based on deviation from English frequencies
int compare_frequencies(const void *a, const void *b) {
    float freq_a = *((float *)a);
    float freq_b = *((float *)b);
    return (freq_b > freq_a) - (freq_b < freq_a); // Compare in descending order
}

// Function to decrypt ciphertext using letter frequency analysis
void decrypt_with_frequency_analysis(const char *ciphertext, char *plaintext, int top_results) {
    int freq[ALPHABET_SIZE] = {0};
    count_letter_frequencies(ciphertext, freq);

    // Calculate frequencies as percentages
    float total_chars = strlen(ciphertext);
    float freq_percent[ALPHABET_SIZE];
    for (int i = 0; i < ALPHABET_SIZE; ++i) {
        freq_percent[i] = (freq[i] / total_chars) * 100.0;
    }

    // Sort frequencies based on deviation from English frequencies
    qsort(freq_percent, ALPHABET_SIZE, sizeof(float), compare_frequencies);

    // Assuming the most frequent letter in English is 'E' (frequency 12.702%)
    // Calculate the shift amount for monoalphabetic substitution cipher based on frequency analysis
    int shift = (freq_percent[0] - 12.702 + ALPHABET_SIZE) % ALPHABET_SIZE;

    // Decrypt ciphertext using the determined shift
    int len = strlen(ciphertext);
    for (int i = 0; i < len; ++i) {
        if (isalpha(ciphertext[i])) {
            char ch = toupper(ciphertext[i]);
            plaintext[i] = isupper(ciphertext[i]) ? ((ch - 'A' - shift + ALPHABET_SIZE) % ALPHABET_SIZE) + 'A' : ((ch - 'a' - shift + ALPHABET_SIZE) % ALPHABET_SIZE) + 'a';
        } else {
            plaintext[i] = ciphertext[i]; // Non-alphabetic characters remain unchanged
        }
    }
    plaintext[len] = '\0';
}

int main() {
    char ciphertext[] = "Jxu auoayk ycu ztzw hqtydwduydw fsxuhj.";
    int top_results = 10;
    char plaintext[strlen(ciphertext) + 1];

    decrypt_with_frequency_analysis(ciphertext, plaintext, top_results);

    printf("Top %d possible plaintexts in rough order of likelihood:\n", top_results);
    printf("---------------------------------------------------------\n");
    printf("%s\n", plaintext);

    return 0;
}
OUTPUT:
