#include <stdio.h>
#include <ctype.h>

// Function to compute the modular inverse of a modulo m using extended Euclidean algorithm
int mod_inverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    // Apply extended Euclidean algorithm
    while (a > 1) {
        q = a / m;
        t = m;

        // m is remainder now, process same as Euclid's algo
        m = a % m;
        a = t;

        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0)
        x1 += m0;

    return x1;
}

// Function to encrypt plaintext using the affine Caesar cipher
void affine_caesar_encrypt(char *plaintext, int a, int b) {
    int i;
    for (i = 0; plaintext[i] != '\0'; ++i) {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            plaintext[i] = ((a * (plaintext[i] - base) + b) % 26) + base;
        }
    }
}

// Function to decrypt ciphertext using the affine Caesar cipher
void affine_caesar_decrypt(char *ciphertext, int a, int b) {
    int a_inv = mod_inverse(a, 26); // Compute modular inverse of a modulo 26
    int i;
    for (i = 0; ciphertext[i] != '\0'; ++i) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            int x = (a_inv * ((ciphertext[i] - base - b + 26) % 26)) % 26;
            ciphertext[i] = x + base;
        }
    }
}

int main() {
    char plaintext[] = "Hello, Affine Caesar Cipher!";
    int a = 5; // Example values for a and b
    int b = 8;

    printf("Original plaintext: %s\n", plaintext);

    // Encrypt plaintext
    affine_caesar_encrypt(plaintext, a, b);
    printf("Encrypted ciphertext: %s\n", plaintext);

    // Decrypt ciphertext
    affine_caesar_decrypt(plaintext, a, b);
    printf("Decrypted plaintext: %s\n", plaintext);

    return 0;
}

OUTPUT:
Original plaintext: Hello, Affine Caesar Cipher!
Encrypted ciphertext: Rclla, Ihhwvc Sicuip Swfrcp!
Decrypted plaintext: Hello, Affine Caesar Cipher!
