#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define ALPHABET_SIZE 26

// Function to compute the greatest common divisor (gcd) of two numbers
int gcd(int a, int b) {
    int temp;
    while (b != 0) {
        temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to compute modular inverse of a modulo m using extended Euclidean algorithm
int mod_inverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    // Apply extended Euclidean algorithm
    while (a > 1) {
        q = a / m;
        t = m;

        // m is remainder now, process same as Euclid's algo
        m = a % m;
        a = t;

        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0)
        x1 += m0;

    return x1;
}

// Function to encrypt plaintext using the Hill cipher with a 2x2 key matrix
void hill_encrypt(const char *plaintext, const int key[2][2], char *ciphertext) {
    int len = strlen(plaintext);
    int i, j;
    for (i = 0; i < len; i += 2) {
        int p1 = plaintext[i] - 'a';
        int p2 = (i + 1 < len) ? plaintext[i + 1] - 'a' : 'x' - 'a'; // Padding with 'x' if plaintext length is odd

        int c1 = (key[0][0] * p1 + key[0][1] * p2) % ALPHABET_SIZE;
        int c2 = (key[1][0] * p1 + key[1][1] * p2) % ALPHABET_SIZE;

        ciphertext[i] = c1 + 'a';
        ciphertext[i + 1] = c2 + 'a';
    }
    ciphertext[len] = '\0';
}

// Function to perform chosen plaintext attack on the Hill cipher with a 2x2 key matrix
void hill_chosen_plaintext_attack(const char *chosen_plaintext, const char *chosen_ciphertext, int key[2][2]) {
    // Convert chosen plaintext and ciphertext to numerical form
    int p1 = chosen_plaintext[0] - 'a';
    int p2 = chosen_plaintext[1] - 'a';

    int c1 = chosen_ciphertext[0] - 'a';
    int c2 = chosen_ciphertext[1] - 'a';

    // Solve linear equations to find key matrix elements
    // For a 2x2 Hill cipher, key matrix is of the form:
    // [ a  b ]
    // [ c  d ]
    // We have:
    // c1 = (a*p1 + b*p2) % 26
    // c2 = (c*p1 + d*p2) % 26

    // Calculate determinant of matrix to check invertibility
    int determinant = key[0][0] * key[1][1] - key[0][1] * key[1][0];
    determinant = (determinant % ALPHABET_SIZE + ALPHABET_SIZE) % ALPHABET_SIZE; // Ensure positive value

    // Check if determinant has a modular inverse modulo ALPHABET_SIZE
    if (gcd(determinant, ALPHABET_SIZE) != 1) {
        printf("Error: The key matrix is not invertible. Chosen plaintext attack cannot proceed.\n");
        return;
    }

    // Calculate modular inverse of determinant modulo ALPHABET_SIZE
    int determinant_inverse = mod_inverse(determinant, ALPHABET_SIZE);

    // Calculate elements of the key matrix
    key[0][0] = (determinant_inverse * key[1][1]) % ALPHABET_SIZE;
    key[0][1] = (ALPHABET_SIZE + (-key[0][0] * key[0][1]) % ALPHABET_SIZE) % ALPHABET_SIZE;
    key[1][0] = (ALPHABET_SIZE + (-key[0][1] * key[1][0]) % ALPHABET_SIZE) % ALPHABET_SIZE;
    key[1][1] = (determinant_inverse * key[0][0]) % ALPHABET_SIZE;

    printf("Key matrix found:\n");
    printf("[ %d  %d ]\n", key[0][0], key[0][1]);
    printf("[ %d  %d ]\n", key[1][0], key[1][1]);
}

int main() {
    int key[2][2] = {{3, 2}, {5, 7}}; // Example key matrix for the Hill cipher
    char chosen_plaintext[] = "pl"; // Chosen plaintext
    char chosen_ciphertext[] = "da"; // Corresponding chosen ciphertext

    printf("Chosen plaintext: %s\n", chosen_plaintext);
    printf("Chosen ciphertext: %s\n", chosen_ciphertext);

    // Perform chosen plaintext attack to find the key matrix
    hill_chosen_plaintext_attack(chosen_plaintext, chosen_ciphertext, key);

    return 0;
}
OUTPUT:
Chosen plaintext: pl
Chosen ciphertext: da
Key matrix found:
[ 3  20 ]
[ 4  5 ]
