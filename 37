#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// English letter frequencies (in percentage)
const float english_frequencies[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
    0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056,
    2.758, 0.978, 2.360, 0.150, 1.974, 0.074
};

// Function to count frequencies of letters in a string
void count_letter_frequencies(const char *text, int *frequencies) {
    int i;
    for (i = 0; text[i] != '\0'; ++i) {
        char ch = toupper(text[i]);
        if (isalpha(ch)) {
            frequencies[ch - 'A']++;
        }
    }
}

// Function to compare letter frequencies based on deviation from English frequencies
int compare_frequencies(const void *a, const void *b) {
    float freq_a = *((float *)a);
    float freq_b = *((float *)b);
    return (freq_b > freq_a) - (freq_b < freq_a); // Compare in descending order
}

// Function to decrypt ciphertext based on frequency analysis
void decrypt_with_frequency_analysis(const char *ciphertext, char *plaintext, int top_results) {
    int freq[ALPHABET_SIZE] = {0};
    count_letter_frequencies(ciphertext, freq);

    // Calculate frequencies as percentages
    float total_chars = strlen(ciphertext);
    float freq_percent[ALPHABET_SIZE];
    for (int i = 0; i < ALPHABET_SIZE; ++i) {
        freq_percent[i] = (freq[i] / total_chars) * 100.0;
    }

    // Sort frequencies based on deviation from English frequencies
    qsort(freq_percent, ALPHABET_SIZE, sizeof(float), compare_frequencies);

    // Mapping letters from most frequent to least frequent based on English language
    char mapping[ALPHABET_SIZE];
    for (int i = 0; i < ALPHABET_SIZE; ++i) {
        int index = freq_percent[i] - english_frequencies[i] + 0.5;
        if (index < 0) index = 0;
        if (index >= ALPHABET_SIZE) index = ALPHABET_SIZE - 1;
        mapping[i] = 'A' + index;
    }

    // Decrypt ciphertext using the determined mapping
    int len = strlen(ciphertext);
    for (int i = 0; i < len; ++i) {
        if (isalpha(ciphertext[i])) {
            char ch = toupper(ciphertext[i]);
            plaintext[i] = isupper(ciphertext[i]) ? mapping[ch - 'A'] : tolower(mapping[ch - 'A']);
        } else {
            plaintext[i] = ciphertext[i]; // Non-alphabetic characters remain unchanged
        }
    }
    plaintext[len] = '\0';
}

int main() {
    char ciphertext[] = "Znk Pmzw dtt. Cqzvdzj, onq Oji wjtn vdzrntmzi dt iuzxj yji jzwxyji njqij yt dtzwnijw yjwqd iuzxj ijwymt jwj ny ujhyxji. Jzwxyji jzwdz onq yji itnz qzyxij tizn jwii yt rnwyjiqti.";

    int top_results = 10;
    char plaintext[strlen(ciphertext) + 1];

    decrypt_with_frequency_analysis(ciphertext, plaintext, top_results);

    printf("Top %d possible plaintexts in rough order of likelihood:\n", top_results);
    printf("---------------------------------------------------------\n");
    printf("%s\n", plaintext);

    return 0;
}
OUTPUT:
Top 10 possible plaintexts in rough order of likelihood:
---------------------------------------------------------
Aab Aaaa daa. Gaaadad, aaa Ada adaa adaaaaaaa da aaaad ada daaaada adaad aa daaaaada adaad aaaad adaaaa dad aa adaaada. Daaaada daada aaa ada aaaa aaaaad aaaa daaa aa aaaadaaaa.
