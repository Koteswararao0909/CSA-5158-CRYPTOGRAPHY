#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/aes.h>

// AES key size in bytes
#define AES_KEY_SIZE 16

// Function to perform AES encryption in CBC mode for one block
void aes_cbc_encrypt(const unsigned char *plaintext, unsigned char *ciphertext, const unsigned char *key) {
    AES_KEY aes_key;
    AES_set_encrypt_key(key, AES_KEY_SIZE * 8, &aes_key);
    AES_encrypt(plaintext, ciphertext, &aes_key);
}

// Function to compute CBC-MAC for a one-block message
void cbc_mac(const unsigned char *message, const unsigned char *key, unsigned char *mac) {
    unsigned char iv[AES_KEY_SIZE] = {0};  // Initialization vector (IV), set to all zeros
    unsigned char ciphertext[AES_KEY_SIZE];

    // Encrypt the message in CBC mode
    aes_cbc_encrypt(message, ciphertext, key);

    // Copy the last block (ciphertext) to use as MAC
    memcpy(mac, ciphertext, AES_KEY_SIZE);
}

int main() {
    unsigned char key[AES_KEY_SIZE] = "abcdefghijklmnop";  // Example 128-bit key
    unsigned char message[AES_KEY_SIZE] = "Hello, CBC-MAC!"; // Example one-block message
    unsigned char mac[AES_KEY_SIZE];

    // Compute CBC-MAC for the one-block message
    cbc_mac(message, key, mac);

    // Print the MAC
    printf("CBC-MAC (T) for message X: ");
    for (int i = 0; i < AES_KEY_SIZE; ++i) {
        printf("%02x", mac[i]);
    }
    printf("\n");

    // Calculate CBC-MAC for the two-block message X || (X XOR T)
    unsigned char two_block_message[2 * AES_KEY_SIZE];
    memcpy(two_block_message, message, AES_KEY_SIZE); // X
    for (int i = 0; i < AES_KEY_SIZE; ++i) {
        two_block_message[AES_KEY_SIZE + i] = message[i] ^ mac[i]; // X XOR T
    }

    // Compute CBC-MAC for the two-block message
    cbc_mac(two_block_message, key, mac);

    // Print the MAC for X || (X XOR T)
    printf("CBC-MAC (T') for message X || (X XOR T): ");
    for (int i = 0; i < AES_KEY_SIZE; ++i) {
        printf("%02x", mac[i]);
    }
    printf("\n");

    return 0;
}
OUTPUT:
